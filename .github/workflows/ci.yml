# .github/workflows/ci.yml

name: Continuous Integration Pipeline

# Define os gatilhos (triggers) que iniciam o workflow
on:
  push:
    branches: [ "main", "master", "develop" ] # Adapte para os nomes das suas branches
  pull_request:
    branches: [ "main", "master", "develop" ]

jobs:
  # Define um 'job' chamado 'build-and-test'
  build-and-test:
    # O tipo de máquina virtual que o job vai rodar
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Clona seu repositório para a máquina virtual
      - name: Check out repository code
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Passo 3: Instala as dependências do Python
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Passo 4: Linting com Flake8
      # Verifica a qualidade do código antes de rodar qualquer coisa.
      # Se o flake8 encontrar erros, o pipeline para aqui.
      - name: Lint with Flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Passo 5: Construir e iniciar os serviços com Docker Compose
      # Criamos um .env a partir dos secrets do GitHub para o DB
      - name: Build and run Docker services
        run: |
          cp .env.example .env # Em um projeto real, usaríamos secrets do GitHub
          docker-compose up --build -d

      # Passo 6: Esperar os serviços ficarem saudáveis
      # Adiciona uma pequena pausa para garantir que o Postgres esteja pronto para aceitar conexões
      - name: Wait for services
        run: sleep 15

      # Passo 7: Rodar as migrações do Alembic
      - name: Run database migrations
        run: docker-compose exec -T api alembic upgrade head

      # Passo 8: Rodar os testes com Pytest
      - name: Run Pytest
        run: docker-compose exec -T api pytest --cov=Backend

      # Passo 9: Parar os serviços Docker
      # Este passo roda mesmo que os testes falhem
      - name: Stop Docker services
        if: always()
        run: docker-compose down